# this is a sample config file that demonstrates how to lookup plugin_id and plugin_sid
# from a TSV file generated by dpluger.

# If the TSV file is mounted from dsiem-tools pod, then updates made by auto-directive
# will automatically be applied to Vector without needing to restart any pod.

sources:
  random_netdevice:
    type: demo_logs
    format: syslog

enrichment_tables:
  random_netdevice:
    type: "file"
    file:
      path: "/etc/vector/random_netdevice.tsv"
      encoding:
        type: "csv"
        delimiter: "\t"
    schema:
      plugin: "string"
      id: "integer"
      sid: "integer"
      title: "string"

transforms:
  transform_random_netdevice:
    type: remap
    inputs:
      - random_netdevice
    drop_on_abort: true
    drop_on_error: true
    source: |-
      . = parse_syslog!(.message)
      temp = .hostname
      .index_name = "random_netdevice"
      .@timestamp = now()
      .host = temp
      
  norm_event_random_netdevice:
    type: remap
    inputs:
      - transform_random_netdevice
    drop_on_abort: true
    drop_on_error: true
    
    # to automatically remove unused fields, first we set the fields we want to keep
    # in the .norm_event object. Then later on when all fields are collected, we set
    # the root object to .norm_event, which will remove all other unused fields.
    # this is a better method than using del().

    # the most important thing below is the lookup of plugin_id and plugin_sid from the
    # enrichment table. This is done by calling get_enrichment_table_record() function.
    # If the record is not found, the transform will abort and the event will be dropped.

    # notice several fields below are hard-coded because the demo log generator doesn't
    # supply them. In actual case we would get them from the log source.

    source: |-
      .norm_event.sensor = .host
      .norm_event.timestamp = .timestamp
      .norm_event.@timestamp = .@timestamp
      .norm_event.src_ip = "0.0.0.0"
      .norm_event.dst_ip = "192.168.0.1"
      .norm_event.src_port = 0
      .norm_event.dst_port = 0
      .norm_event.protocol = "TCP/IP"
      .norm_event.product = "Network Device"
      .norm_event.category = "Router"

      row, err = get_enrichment_table_record("random_netdevice", { "title":  .appname })
      if err != null {
        abort
      }
      .norm_event.plugin_id = row.id
      .norm_event.plugin_sid = row.sid
      .norm_event.title, err = "Random device event: " + row.title
      if err != null {
        log("Unable to set title: " + err, level: "error")
        abort
      }

      . = .norm_event
      .index_name = "siem_events"
      .event_id = uuid_v4()


# the following is an example test case for the above transforms.
# the test supplies a log line to the transform_random_netdevice, and assert the
# output of norm_event_random_netdevice. The test can be run using the command:

# vector test /etc/vector/random_netdevice.yaml

# As an example, try changing .plugin_sid below to 7, and run the test. The test
# should fail with an error message.

# This type of tests should be written for all log sources, and the tests should 
# be run before deploying the pipeline to production, and the following command:

# docker run -v $(pwd)/conf/vector/central:/etc/vector timberio/vector:latest-alpine test --config-dir /etc/vector

# should be executed as a test in the config repo to ensure that incoming commits
# don't break existing configurations.

tests:
  - name: "random_netdevice normalized event parser test"
    inputs:
      - insert_at: transform_random_netdevice
        value: |
          <12>2 2024-04-02T21:52:45.043Z we.pizza ahmadajmi 1340 ID810 - A bug was encountered but not in Vector, which doesnt have bugs
    outputs:
      - extract_from: norm_event_random_netdevice
        conditions:
          - type: "vrl"
            source: |-
              assert!(.plugin_id == 31337)
              assert!(.plugin_sid == 6)
              assert!(.title == "Random device event: ahmadajmi")
              assert!(is_ipv4!(.dst_ip))
              assert!(is_integer(.src_port))
